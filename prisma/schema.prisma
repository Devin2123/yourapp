datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If you hit a shadow DB permission error, uncomment:
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OrderStatus {
  PENDING
  PAID
  EXPIRED
  CANCELED
  FAILED
}

enum RoleGrantStatus {
  QUEUED
  DONE
  FAILED
}

enum PayoutStatus {
  QUEUED
  REQUESTED
  SENT
  CONFIRMED
  FAILED
}

model Server {
  id              String    @id @default(cuid())
  guildId         String    @unique
  ownerDiscordId  String
  payoutWallet    String
  chain           String    @default("POLYGON")
  splitterAddress String
  createdAt       DateTime  @default(now())
  products        Product[]
  payouts         Payout[]
}

model Product {
  id          String   @id @default(cuid())
  serverId    String
  server      Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  name        String
  description String?
  priceWei    String
  currency    String
  chain       String   @default("POLYGON")
  roleId      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  orders      Order[]
  roleGrants  RoleGrant[]

  @@index([serverId])
  @@index([active, createdAt])
}

model Order {
  id             String      @id @default(cuid())
  productId      String
  product        Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyerDiscordId String?
  invoiceId      String?     @unique
  status         OrderStatus @default(PENDING)

  // existing (native amounts)
  grossWei       String?

  // optional split breakdown in "minor units" (e.g., USDC 6dp or wei for native)
  grossMinor     String?
  feeMinor       String?
  netMinor       String?

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  roleGrants     RoleGrant[]
  webhookEvents  WebhookEvent[]
  payouts        Payout[]

  @@index([status, updatedAt])
  @@index([invoiceId])
}

model WebhookEvent {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  deliveryId String   @unique
  type       String
  invoiceId  String?
  orderId    String?
  raw        Json

  order      Order?   @relation(fields: [orderId], references: [id])

  @@index([invoiceId])
  @@index([type, createdAt])
}

model RoleGrant {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  orderId   String
  productId String
  discordId String
  status    RoleGrantStatus @default(QUEUED)
  attempts  Int             @default(0)
  lastError String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([status, updatedAt])
  @@index([discordId])
}

model Payout {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  serverId    String
  Server      Server        @relation(fields: [serverId], references: [id])

  orderId     String?
  Order       Order?        @relation(fields: [orderId], references: [id])

  amountMinor String        // smallest units (e.g., USDC 6dp, or wei for native)
  asset       String        // "USDC" | "NATIVE" | "USDT" etc.
  chain       String        // "POLYGON" | "ETHEREUM" etc.
  toAddress   String        // seller payout address

  externalId  String?       // provider payout id
  txHash      String?

  status      PayoutStatus  @default(QUEUED)
  attempts    Int           @default(0)
  lastError   String?

  @@index([status, createdAt])
}
